# Multi-stage build for staging environment
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json* ./
RUN npm ci --only=production

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build arguments
ARG NODE_ENV=staging
ARG VITE_APP_ENV=staging
ARG VITE_APP_VERSION=staging-docker

# Set build environment
ENV NODE_ENV=$NODE_ENV
ENV VITE_APP_ENV=$VITE_APP_ENV
ENV VITE_APP_VERSION=$VITE_APP_VERSION

# Build the application
RUN npm run build

# Production image, copy all the files and run the app
FROM nginx:alpine AS runner

# Set staging-specific labels
LABEL environment="staging"
LABEL version="staging-latest"
LABEL maintainer="Haus of Basquiat Portal Team"

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration for staging
COPY nginx/staging.conf /etc/nginx/nginx.conf

# Create health check endpoint
RUN echo '{"status":"healthy","environment":"staging","timestamp":"'$(date -Iseconds)'"}' > /usr/share/nginx/html/health

# Add non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S appuser -u 1001

# Change ownership of nginx directories
RUN chown -R appuser:nodejs /var/cache/nginx
RUN chown -R appuser:nodejs /var/log/nginx
RUN chown -R appuser:nodejs /etc/nginx/conf.d
RUN touch /var/run/nginx.pid
RUN chown -R appuser:nodejs /var/run/nginx.pid

USER appuser

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

CMD ["nginx", "-g", "daemon off;"]