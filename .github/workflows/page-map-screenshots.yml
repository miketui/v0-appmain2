name: Generate Page Map & Screenshots

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'components/**'
      - 'tests/page-map.spec.ts'

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  page-map:
    name: Generate Page Map & Screenshots
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          # Mock environment variables for build
          NEXT_PUBLIC_SUPABASE_URL: "https://mock-project.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: "mock-anon-key"
          SUPABASE_SERVICE_ROLE_KEY: "mock-service-role-key"
          DATABASE_URL: "postgresql://mock:mock@localhost:5432/mock"
          JWT_SECRET: "mock-jwt-secret-for-build-only-123"
          NEXT_PUBLIC_APP_URL: "http://localhost:3000"

      - name: Start application server
        run: |
          npm start &
          sleep 10
          # Wait for server to be ready
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_SUPABASE_URL: "https://mock-project.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: "mock-anon-key"
          SUPABASE_SERVICE_ROLE_KEY: "mock-service-role-key"
          DATABASE_URL: "postgresql://mock:mock@localhost:5432/mock"
          JWT_SECRET: "mock-jwt-secret-for-build-only-123"
          NEXT_PUBLIC_APP_URL: "http://localhost:3000"

      - name: Run page mapping tests
        run: npx playwright test tests/page-map.spec.ts --reporter=html
        continue-on-error: true
        env:
          NODE_ENV: test

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: page-screenshots
          path: screenshots/
          retention-days: 30

      - name: Upload page map results
        uses: actions/upload-artifact@v4
        with:
          name: page-map-results
          path: test-results/
          retention-days: 30

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Create Page Map Summary
        run: |
          echo "## 📊 Page Map Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "test-results/page-map.json" ]; then
            ACCESSIBLE=$(jq '.summary.accessible' test-results/page-map.json)
            ERRORS=$(jq '.summary.errors' test-results/page-map.json)
            TOTAL=$(jq '.totalRoutes' test-results/page-map.json)

            echo "### Summary" >> $GITHUB_STEP_SUMMARY
            echo "- 📄 **Total Routes**: $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Accessible**: $ACCESSIBLE" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ **Errors**: $ERRORS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            echo "### Routes Tested" >> $GITHUB_STEP_SUMMARY
            jq -r '.routes[] | "- \(.path) (\(.name)) - \(.status)"' test-results/page-map.json >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Page map generation failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- 📷 Screenshots of all accessible pages" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Detailed page map (JSON + HTML)" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Playwright test report" >> $GITHUB_STEP_SUMMARY

  # Optional: Deploy page map to GitHub Pages
  deploy-page-map:
    name: Deploy Page Map to GitHub Pages
    runs-on: ubuntu-latest
    needs: page-map
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download page map results
        uses: actions/download-artifact@v4
        with:
          name: page-map-results
          path: ./page-map

      - name: Download screenshots
        uses: actions/download-artifact@v4
        with:
          name: page-screenshots
          path: ./page-map/screenshots

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./page-map

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4